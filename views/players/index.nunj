{% extends 'base/index.nunj' %}


{% block content %}
    <div class="column">
        {% for player in players %}
            <div class="box">
                {# Player fullname #}
                <h4 class="title is-4">{{ player.first_name }} {{ player.last_name }}</h4>
                {# Player victories #}
                <div class="columns">
                    <div class="column is-2">Victories:</div>
                    <div class="column">
                        <i class="fa fa-trophy" aria-hidden="true"></i> {{ player.aggregatedRankings.first }}
                    </div>
                </div>
                {# Player scores #}
                <div class="columns">
                    <div class="column is-2">Final scores:</div>
                    <div class="column">
                        <i class="fa fa-chevron-up" aria-hidden="true"></i> {{ player.highScore }}
                        <i class="fa fa-chevron-down" aria-hidden="true"></i> {{ player.lowScore }}
                        (avg. {{ player.averageScore }})
                    </div>
                </div>
                {# Player points #}
                <div class="columns">
                    <div class="column is-2">Points</div>
                    <div class="column">
                        <i class="fa fa-chevron-up" aria-hidden="true"></i> {{ player.highPoint }}
                        <i class="fa fa-chevron-down" aria-hidden="true"></i> {{ player.lowPoint }}
                    </div>
                </div>
            </div>
        {% endfor %}
    </div>
    <canvas id="myChart"></canvas>
{% endblock %}

{% block my_scripts %}
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.1.4/Chart.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.16.2/axios.min.js"></script>
    <script>

        const drawGraph = (labels, dataSets) => {

        };

        // make concurrent requests
        axios.all([
            axios.get('/api/players/nick/rankings'),
            axios.get('/api/players/ira/rankings'),
            axios.get('/api/players/john/rankings'),
        ])
            .then(axios.spread((nickRes, iraRes, johnRes) => {
                const nickRankings = nickRes.data
                    , iraRankings = iraRes.data
                    , johnRankings = johnRes.data;

                const gameIds = nickRankings.map(ranking => ranking.gameId);

                // Assure that all rankings are pushed in the array in the same order (i.e correspond to the same game)
                const nickData = []
                    , iraData = []
                    , johnData = [];

                for (let gameId of gameIds) {
                    nickData.push(nickRankings.filter(ranking => ranking.gameId === gameId)[0].rank);
                    iraData.push(iraRankings.filter(ranking => ranking.gameId === gameId)[0].rank);
                    johnData.push(johnRankings.filter(ranking => ranking.gameId === gameId)[0].rank);
                }

                const ctx = document.getElementById('myChart').getContext('2d');
                const myChart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: gameIds,
//                        xLabels: gameIds,
//                        yLabels: [1, 2, 3],
                        datasets: [{
                            label: 'nick',
                            data: nickData,
                            fill: false,
                            borderColor: "#3e95cd",
                            backgroundColor: "#3e95cd",
                        }, {
                            label: 'john',
                            data: johnData,
                            fill: false,
                            borderColor: "#3cba9f",
                            backgroundColor: "#3cba9f",
                        }, {
                            label: 'ira',
                            data: iraData,
                            fill: false,
                            borderColor: "#c45850",
                            backgroundColor: "#c45850",
                        }]
                    },
                    options: {
                        responsive: true,
//                        title:{
//                            display: true,
//                            text: 'Chart.js - Non Numeric X and Y Axis'
//                        },
//                        legend: {
//                            display: false
//                        },
                        scales: {
//                            xAxes: [{
//                                display: true,
//                                scaleLabel: {
//                                    display: true,
//                                    labelString: 'Month'
//                                }
//                            }],
                            yAxes: [{
//                                type: 'category',
//                                position: 'left',
                                display: true,
                                scaleLabel: {
                                    display: true,
                                    labelString: 'Request State'
                                },
                                ticks: {
                                    reverse: true
                                },
                            }]
                        }
                    }
                });
            }))
            //.then(response => this.setState({ vehicles: response.data }))
            .catch(error => console.log(error));

        //        const url = `/api/players/john/rankings`;
        //        axios.get(url)
        //            .then(function (response) {
        //                const rankings = response.data;
        //                const ctx = document.getElementById('myChart').getContext('2d');
        //
        //                const myChart = new Chart(ctx, {
        //                    type: 'line',
        //                    data: {
        //                        labels: rankings.map(ranking => ranking.id),
        //                        datasets: [{
        //                            label: 'nick',
        //                            data: rankings.map(ranking => -ranking.rank),
        //                            fill: false
        //                        }]
        //                    }
        //                });
        //            })
        //            .catch(function (error) {
        //                console.log(error);
        //            });
    </script>
{% endblock %}